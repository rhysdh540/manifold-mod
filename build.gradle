plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "io.github.pacifistmc.forgix" version "1.2.6"
}

architectury {
    minecraft = rootProject.minecraft_version
}
version = rootProject.manifold.split("-")[0]

forgix {
    group = "systems.manifold.mod"
    mergedJarName = "manifold-${version}+mc${minecraft_version}.jar"
    outputDir = "build/libs/merged"
}

subprojects { p ->
    apply plugin: "dev.architectury.loom"

    configurations {
        addJarRuntime
        addJarCompile

        if (p != project(":common")) {
            include.extendsFrom addJarRuntime
            include.extendsFrom addJarCompile
        }
        api.extendsFrom addJarRuntime
        compileOnlyApi.extendsFrom addJarCompile
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        repositories {
            mavenCentral()
            maven { url = "https://maven.parchmentmc.org" }
            maven { url = "https://maven.quiltmc.org/repository/release" }
        }

        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"

        mappings(loom.layered {
            it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt}:intermediary-v2")
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment}@zip")
            it.officialMojangMappings { nameSyntheticMembers = false }
        })

        annotationProcessor getMavenCoords("preprocessor")
        addJarCompile getMavenCoords("preprocessor")

        addJarCompile getMavenCoords()
        addJarRuntime getMavenCoords("rt")
        addJarRuntime getMavenCoords("ext-rt")
        addJarRuntime getMavenCoords("csv-rt")
        //addJarRuntime getMavenCoords("darkj")
        addJarRuntime getMavenCoords("delegation-rt")
        addJarRuntime getMavenCoords("graphql-rt")
        addJarRuntime getMavenCoords("js-rt")
        addJarRuntime getMavenCoords("json-rt")
        addJarRuntime getMavenCoords("props-rt")
        addJarRuntime getMavenCoords("science")
        addJarRuntime getMavenCoords("sql-rt")
        addJarRuntime getMavenCoords("templates-rt")
        addJarRuntime getMavenCoords("tuple-rt")
        addJarCompile getMavenCoords("xml-rt")
        addJarCompile getMavenCoords("yaml-rt")

        addJarCompile getMavenCoords("delegation")
        addJarCompile getMavenCoords("ext")
        addJarCompile getMavenCoords("collections")
        addJarCompile getMavenCoords("csv")
        addJarCompile getMavenCoords("exceptions")
        addJarCompile getMavenCoords("graphql")
        addJarCompile getMavenCoords("highjump")
        addJarCompile getMavenCoords("image")
        addJarCompile getMavenCoords("io")
        addJarCompile getMavenCoords("js")
        addJarCompile getMavenCoords("json")
        addJarCompile getMavenCoords("properties")
        addJarCompile getMavenCoords("props")
        addJarCompile getMavenCoords("sql")
        addJarCompile getMavenCoords("strings")
        addJarCompile getMavenCoords("templates")
        addJarCompile getMavenCoords("tuple")
        addJarCompile getMavenCoords("xml")
        addJarCompile getMavenCoords("yaml")
    }

    remapJar.finalizedBy(mergeJars)
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.manifold.split("-")[0]
    group = rootProject.maven_group

    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
        options.compilerArgs += ['-Xplugin:Manifold']
    }

    java {
        withSourcesJar()
    }
}

def getMavenCoords(String name) {
    return "systems.manifold:manifold${name == null ? "" : "-${name}"}:${rootProject.manifold}"
}
